/*LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
【平    台】北京龙邱智能科技TC264DA核心板
【编    写】ZYF/chiusir
【E-mail  】chiusir@163.com
【软件版本】V1.1 版权所有，单位使用请先联系授权
【最后更新】2020年4月10日
【相关信息参考下列地址】
【网    站】http://www.lqist.cn
【淘宝店铺】http://longqiu.taobao.com
------------------------------------------------
【dev.env.】Hightec4.9.3/Tasking6.3及以上版本
【Target 】 TC264DA
【Crystal】 20.000Mhz
【SYS PLL】 200MHz
________________________________________________________________

QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ*/

// #include <LQ_GPIO.h>
// #include <LQ_GPIO_LED.h>
// #include <LQ_STM.h>
extern "C"
{
#include "pa_TFT18.h"
// #include <LQ_TFT18Pic.h>
// #include <Platform_Types.h>
#include <stdio.h>

#include "pa_TFT18_drv.h"
}
//龙邱TFT SPI口模块管脚顺序
// #define TFTSPI_CS       P20_14     // CS管脚 默认拉低，可以不用
// #define TFTSPI_SCK      P20_11     // SPI SCK管脚
// #define TFTSPI_SDI      P20_10     // SPI MOSI管脚
// #define TFTSPI_DC       P20_12     // D/C管脚
// #define TFTSPI_RST      P20_13     // RESET管脚

/**
  * @brief    不精确延时
  *
  * @param    无
  *
  * @return   无
  *
  * @note     无
  *
  * @see      lq_tft_delayms(100);
  *
  * @date     2019/4/22 星期一
*/
static void lq_tft_delayms(uint16_t ms)
{
  volatile uint32_t i = 0;
  pa_delayMs(ms);
  // while(ms--)
  // {
  // 	for (i = 0; i < 15000; ++i)
  // 	{
  // 		__asm("NOP"); /* delay */
  // 	}
  // }
}

/*!
  * @brief    TFT18初始化
  *
  * @param    type ： 0:横屏  1：竖屏
  *
  * @return   无
  *
  * @note     如果修改管脚 需要修改初始化的管脚
  *
  * @see      TFTSPI_Init(1);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_Init(uint8_t type)
{
  //-----端口初始化----//
  pa_TFT_initGpio();

  TFTSPI_RST_L;
  lq_tft_delayms(50);
  TFTSPI_RST_H;
  lq_tft_delayms(50);
  TFTSPI_Write_Cmd(0x11); //关闭睡眠，振荡器工作
  lq_tft_delayms(10);
  TFTSPI_Write_Cmd(0x3a); //每次传送16位数据(VIPF3-0=0101)，每个像素16位(IFPF2-0=101)
  TFTSPI_Write_Byte(0x55);
  TFTSPI_Write_Cmd(0x26);
  TFTSPI_Write_Byte(0x04);
  TFTSPI_Write_Cmd(0xf2); //Driver Output Control(1)
  TFTSPI_Write_Byte(0x01);
  TFTSPI_Write_Cmd(0xe0); //Driver Output Control(1)
  TFTSPI_Write_Byte(0x3f);
  TFTSPI_Write_Byte(0x25);
  TFTSPI_Write_Byte(0x1c);
  TFTSPI_Write_Byte(0x1e);
  TFTSPI_Write_Byte(0x20);
  TFTSPI_Write_Byte(0x12);
  TFTSPI_Write_Byte(0x2a);
  TFTSPI_Write_Byte(0x90);
  TFTSPI_Write_Byte(0x24);
  TFTSPI_Write_Byte(0x11);
  TFTSPI_Write_Byte(0x00);
  TFTSPI_Write_Byte(0x00);
  TFTSPI_Write_Byte(0x00);
  TFTSPI_Write_Byte(0x00);
  TFTSPI_Write_Byte(0x00);
  TFTSPI_Write_Cmd(0xe1); //Driver Output Control(1)
  TFTSPI_Write_Byte(0x20);
  TFTSPI_Write_Byte(0x20);
  TFTSPI_Write_Byte(0x20);
  TFTSPI_Write_Byte(0x20);
  TFTSPI_Write_Byte(0x05);
  TFTSPI_Write_Byte(0x00);
  TFTSPI_Write_Byte(0x15);
  TFTSPI_Write_Byte(0xa7);
  TFTSPI_Write_Byte(0x3d);
  TFTSPI_Write_Byte(0x18);
  TFTSPI_Write_Byte(0x25);
  TFTSPI_Write_Byte(0x2a);
  TFTSPI_Write_Byte(0x2b);
  TFTSPI_Write_Byte(0x2b);
  TFTSPI_Write_Byte(0x3a);
  TFTSPI_Write_Cmd(0xb1);  //0xb1      	//设置屏幕刷新频率
  TFTSPI_Write_Byte(0x00); //0x08		//DIVA=8
  TFTSPI_Write_Byte(0x00); //0x08		//VPA =8，约90Hz
  TFTSPI_Write_Cmd(0xb4);  //LCD Driveing control
  TFTSPI_Write_Byte(0x07); //NLA=1,NLB=1,NLC=1
  TFTSPI_Write_Cmd(0xc0);  //LCD Driveing control  Power_Control1
  TFTSPI_Write_Byte(0x0a);
  TFTSPI_Write_Byte(0x02);
  TFTSPI_Write_Cmd(0xc1); //LCD Driveing control
  TFTSPI_Write_Byte(0x02);
  TFTSPI_Write_Cmd(0xc5); //LCD Driveing control
  TFTSPI_Write_Byte(0x4f);
  TFTSPI_Write_Byte(0x5a);
  TFTSPI_Write_Cmd(0xc7); //LCD Driveing control
  TFTSPI_Write_Byte(0x40);
  TFTSPI_Write_Cmd(0x2a);  //配置MCU可操作的LCD内部RAM横坐标起始、结束参数
  TFTSPI_Write_Byte(0x00); //横坐标起始地址0x0000
  TFTSPI_Write_Byte(0x00);
  TFTSPI_Write_Byte(0x00); //横坐标结束地址0x007f(127)
  TFTSPI_Write_Byte(0xa8); //7f
  TFTSPI_Write_Cmd(0x2b);  //配置MCU可操作的LCD内部RAM纵坐标起始结束参数
  TFTSPI_Write_Byte(0x00); //纵坐标起始地址0x0000
  TFTSPI_Write_Byte(0x00);
  TFTSPI_Write_Byte(0x00); //纵坐标结束地址0x009f(159)
  TFTSPI_Write_Byte(0xb3); //9f
  TFTSPI_Write_Cmd(0x36);  //配置MPU和DDRAM对应关系
  if (type)
    TFTSPI_Write_Byte(0xC0); //竖屏显示          //MX=1,MY=1
  else
    TFTSPI_Write_Byte(0xA0); //横屏显示

  TFTSPI_Write_Cmd(0xb7);  //LCD Driveing control
  TFTSPI_Write_Byte(0x00); //CRL=0
  TFTSPI_Write_Cmd(0x29);  //开启屏幕显示
  TFTSPI_Write_Cmd(0x2c);  //设置为LCD接收数据/命令模式
}

/*!
  * @brief    简单延时函数
  *
  * @param    Del ：延时时间
  *
  * @return   无
  *
  * @note     内部调用
  *
  * @see      tft18delay_1us(1);
  *
  * @date     2019/6/13 星期四
  */
void tft18delay_1us(unsigned int Del) //
{
  while(Del--)
  {
    // __asm("NOP");
  }
}

// #define softSpi
/*!
  * @brief    写命令
  *
  * @param    cmd ：命令
  *
  * @return   无
  *
  * @note     内部调用
  *
  * @see      TFTSPI_Write_Cmd(0xb7); //LCD Driveing control
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_Write_Cmd(uint8_t cmd)
{
  uint8_t i;

  TFTSPI_DC_L; // A0=0 ILI9163_A0=0;	 //A0=0发送命令

#ifdef softSpi
  for (i = 0; i < 8; i++)
  {
    TFTSPI_SCK_L;
    tft18delay_1us(1); // SCK=0  ILI9163_SCK=0;
    if (cmd & 0x80)
    {
      TFTSPI_SDI_H;
    } // SDI=1
    else
    {
      TFTSPI_SDI_L;
    } // SDI=0
    TFTSPI_SCK_H;
    tft18delay_1us(1); // SCK=1  ILI9163_SCK = 1;
    cmd = (cmd << 1);
  }
#else
  pa_spiTransmit(&cmd,1);
#endif
  // pa_spiTransmit(cmd,1);
  // for(i=0;i<8;i++)
  // {
  //   TFTSPI_SCK_L;tft18delay_1us(1);	// SCK=0  ILI9163_SCK=0;
  //   if(cmd&0x80){TFTSPI_SDI_H;}// SDI=1
  //   else{TFTSPI_SDI_L;}// SDI=0
  //   TFTSPI_SCK_H;tft18delay_1us(1);	// SCK=1  ILI9163_SCK = 1;
  //   cmd = (cmd<<1);
  // }
}

/*!
  * @brief    写字节
  *
  * @param    dat ：数据
  *
  * @return   无
  *
  * @note     内部调用
  *
  * @see      TFTSPI_Write_Byte(0x00);	//CRL=0
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_Write_Byte(uint8_t dat)
{
  uint8_t i;

  TFTSPI_DC_H; // A0=1  ILI9163_A0=1;		  //A0=1发送数据

  // pa_spiTransmit(dat,1);
  #ifdef softSpi
  for (i = 0; i < 8; i++)
  {
    TFTSPI_SCK_L; //tft18delay_1us(1);	// SCK=0  ILI9163_SCK=0;
    if (dat & 0x80)
    {
      TFTSPI_SDI_H;
    } // SDI=1
    else
    {
      TFTSPI_SDI_L;
    }             // SDI=0
    TFTSPI_SCK_H; //tft18delay_1us(1);	// SCK=1 ILI9163_SCK = 1;
    dat = (dat << 1);
  }
  #else
    // SPI_transmitData(EUSCI_B0_BASE, dat);
    pa_spiTransmit(&dat,1);
  #endif
}

/*!
  * @brief    写半字
  *
  * @param    dat ：数据
  *
  * @return   无
  *
  * @note     无
  *
  * @see      TFTSPI_Write_Word(0xFFFF);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_Write_Word(uint16_t dat)
{
  uint8_t i;

  TFTSPI_DC_H; // A0=1  ILI9163_A0=1;
  unsigned char a[2];
  a[0] = dat >> 8;
  a[1] = dat;
  // pa_spiTransmit(a,2);
  #ifdef softSpi
  for (i = 0; i < 16; i++)
  {
    TFTSPI_SCK_L;
    tft18delay_1us(1); // SCK=0  ILI9163_SCK=0;
    if (dat & 0x8000)
    {
      TFTSPI_SDI_H;
    } // SDI=1
    else
    {
      TFTSPI_SDI_L;
    } // SDI=0
    TFTSPI_SCK_H;
    tft18delay_1us(1); // SCK=1  ILI9163_SCK=1;
    dat <<= 1;
  }
  #else
  pa_spiTransmit(a,2);
    // SPI_transmitData(EUSCI_B0_BASE, a[1]);
    // SPI_transmitData(EUSCI_B0_BASE, a[0]);
  #endif
}

/*!
  * @brief    重新定位输入信息位置
  *
  * @param    xs ：起始x
  * @param    ys ：起始y
  * @param    xe ：结束x
  * @param    ys ：结束y
  *
  * @return   无
  *
  * @note     内部调用
  *
  * @see      TFTSPI_Set_Pos(10, 20, 30, 40);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_Set_Pos(uint8_t xs, uint8_t ys, uint8_t xe, uint8_t ye)
{
  TFTSPI_Write_Cmd(0x2A);  //Colulm addRSTs set
  TFTSPI_Write_Byte(0x00); //行起始坐标高8位，始终为零
  TFTSPI_Write_Byte(xs);   //行起始坐标低8位
  TFTSPI_Write_Byte(0x00); //行终止坐标高8位，始终为零
  TFTSPI_Write_Byte(xe);   //行终止坐标低8位
  TFTSPI_Write_Cmd(0x2B);  //Colulm addRSTs set
  TFTSPI_Write_Byte(0x00); //列起始坐标高8位，始终为零
  TFTSPI_Write_Byte(ys);   //列起始坐标低8位
  TFTSPI_Write_Byte(0x00); //列终止坐标高8位，始终为零
  TFTSPI_Write_Byte(ye);   //列终止坐标低8位
  TFTSPI_Write_Cmd(0x2C);  //GRAM接收MCU数据或命令
}

/*!
  * @brief    重置地址
  *
  * @param    无
  *
  * @return   无
  *
  * @note     内部调用
  *
  * @see      TFTSPI_Addr_Rst();
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_Addr_Rst(void)
{
  TFTSPI_Write_Cmd(0x2a);  //配置MCU可操作的LCD内部RAM横坐标起始、结束参数
  TFTSPI_Write_Byte(0x00); //横坐标起始地址0x0000
  TFTSPI_Write_Byte(0x00);
  TFTSPI_Write_Byte(0x00); //横坐标结束地址0x007f(127)
  TFTSPI_Write_Byte(0xa8); //7f
  TFTSPI_Write_Cmd(0x2b);  //配置MCU可操作的LCD内部RAM纵坐标起始结束参数
  TFTSPI_Write_Byte(0x00); //纵坐标起始地址0x0000
  TFTSPI_Write_Byte(0x00);
  TFTSPI_Write_Byte(0x00); //纵坐标结束地址0x009f(159)
  TFTSPI_Write_Byte(0xb3); //9f
  TFTSPI_Write_Cmd(0x2C);  //GRAM接收MCU数据或命令
}

/*!
  * @brief    填充指定区域
  *
  * @param    xs ：起始x
  * @param    ys ：起始y
  * @param    xe ：结束x
  * @param    ys ：结束y
  * @param    color ：填充的颜色
  *
  * @return   无
  *
  * @note     起始、终止横坐标(0-127)，纵坐标(0-159),显示颜色uint16
  *
  * @see      TFTSPI_Fill_Area(10, 20, 30, 40, u16YELLOW);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_Fill_Area(uint8_t xs, uint8_t ys, uint8_t xe, uint8_t ye, uint16_t color)
{
  unsigned int i, j;

  TFTSPI_Set_Pos(xs, ys, xe, ye);
  int a = (xe - xs);
  int b = (ye - ys);
  for (i = 0; i < a; i++)
  {
    for (j = 0; j < b; j++)
    {
      TFTSPI_Write_Word(color);
    }
  }
}

/*!
  * @brief    全屏显示单色画面
  *
  * @param    color ：填充的颜色
  *
  * @return   无
  *
  * @note     起始、终止横坐标(0-127)，纵坐标(0-159),显示颜色uint16
  *
  * @see      TFTSPI_CLS(u16YELLOW);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_CLS(uint16_t color)
{
  unsigned int i, j;

  TFTSPI_Addr_Rst();

  for (i = 0; i < TFT18W; i++) //160
  {
    for (j = 0; j < TFT18H; j++)
    {
      TFTSPI_Write_Word(color);
    }
  }
}

/*!
  * @brief    填充矩形区域
  *
  * @param    xs ：起始x
  * @param    ys ：起始y
  * @param    xe ：结束x
  * @param    ys ：结束y
  * @param    color_dat ：填充的颜色
  *
  * @return   无
  *
  * @note     起始、终止横坐标(0-127)，纵坐标(0-159),显示颜色uint16
  *
  * @see      TFTSPI_Draw_Part(10, 20, 30, 40, u16YELLOW);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_Draw_Part(uint8_t xs, uint8_t ys, uint8_t xe, uint8_t ye, uint16_t color_dat)
{
  uint8_t i, j;

  TFTSPI_Set_Pos(xs, ys, xe, ye);
  for (j = 0; j < (ye - ys + 1); j++)
  {
    for (i = 0; i < (xe - xs + 1); i++)
    {
      TFTSPI_Write_Word(color_dat);
    }
  }
}

/*!
  * @brief    画矩形边框
  *
  * @param    xs ：起始x
  * @param    ys ：起始y
  * @param    xe ：结束x
  * @param    ys ：结束y
  * @param    color_dat ：颜色
  *
  * @return   无
  *
  * @note     起始、终止横坐标(0-127)，纵坐标(0-159),显示颜色uint16
  *
  * @see      TFTSPI_Draw_Rectangle(10, 20, 30, 40, u16YELLOW);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_Draw_Rectangle(uint8_t xs, uint8_t ys, uint8_t xe, uint8_t ye, uint16_t color_dat)
{
  TFTSPI_Draw_Line(xs, ys, xs, ye, color_dat); //画矩形左边
  TFTSPI_Draw_Line(xe, ys, xe, ye, color_dat); //画矩形右边
  TFTSPI_Draw_Line(xs, ys, xe, ys, color_dat); //画矩形上边
  TFTSPI_Draw_Line(xs, ye, xe, ye, color_dat); //画矩形下边
}

/*!
  * @brief    画圆
  *
  * @param    x ：圆心x   (0-127)
  * @param    y ：圆心y   (0-159)
  * @param    r ：半径    (0-128)
  * @param    color_dat ：颜色
  *
  * @return   无
  *
  * @note     圆心坐标不要超出屏幕范围
  *
  * @see      TFTSPI_Draw_Circle(50, 50, 30, u16YELLOW);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_Draw_Circle(uint8_t x, uint8_t y, uint8_t r, uint16_t color_dat)
{
  unsigned char dx, dy = r;

  if ((x >= r) && ((TFT18W - x) >= r) && (y >= r) && ((TFT18H - y) >= r)) //确定所画圆在屏幕范围内，没有超出最外边，(暂不支持与屏幕边相交)
  {
    for (dx = 0; dx <= r; dx++)
    {
      while ((r * r + 1 - dx * dx) < (dy * dy))
        dy--;
      TFTSPI_Draw_Dot(x + dx, y - dy, color_dat);
      TFTSPI_Draw_Dot(x - dx, y - dy, color_dat);
      TFTSPI_Draw_Dot(x - dx, y + dy, color_dat);
      TFTSPI_Draw_Dot(x + dx, y + dy, color_dat);

      TFTSPI_Draw_Dot(x + dy, y - dx, color_dat);
      TFTSPI_Draw_Dot(x - dy, y - dx, color_dat);
      TFTSPI_Draw_Dot(x - dy, y + dx, color_dat);
      TFTSPI_Draw_Dot(x + dy, y + dx, color_dat);
    }
  }
}

/*!
  * @brief    画线
  *
  * @param    xs ：起始x
  * @param    ys ：起始y
  * @param    xe ：结束x
  * @param    ys ：结束y
  * @param    color_dat ：颜色
  *
  * @return   无
  *
  * @note     起始、终止横坐标(0-127)，纵坐标(0-159),显示颜色uint16
  *
  * @see      TFTSPI_Draw_Line(10, 20, 30, 40, u16YELLOW);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_Draw_Line(uint8_t xs, uint8_t ys, uint8_t xe, uint8_t ye, uint16_t color_dat)
{
  int i, ds;
  int dx, dy, inc_x, inc_y;
  int xerr = 0, yerr = 0; //初始化变量

  if (xs == xe) //如果是画垂直线则只需对竖直坐标计数
  {
    TFTSPI_Set_Pos(xs, ys, xe, ye);
    for (i = 0; i < (ye - ys + 1); i++)
    {
      TFTSPI_Write_Word(color_dat);
    }
  }
  else if (ys == ye) //如果是水平线则只需要对水平坐标计数
  {
    TFTSPI_Set_Pos(xs, ys, xe, ye);
    for (i = 0; i < (xe - xs + 1); i++)
    {
      TFTSPI_Write_Word(color_dat);
    }
  }
  else //如果是斜线，则重新计算，使用画点函数画出直线
  {
    dx = xe - xs; //计算坐标增量
    dy = ye - ys;

    if (dx > 0)
      inc_x = 1; //设置单步方向
    else
    {
      inc_x = -1;
      dx = -dx;
    }
    if (dy > 0)
      inc_y = 1; //设置单步方向
    else
    {
      inc_y = -1;
      dy = -dy;
    }

    if (dx > dy)
    {
      ds = dx;
    } //选取基本增量坐标轴
    else
    {
      ds = dy;
    }

    for (i = 0; i <= ds + 1; i++) //画线输出
    {
      TFTSPI_Draw_Dot(xs, ys, color_dat); //画点
      xerr += dx;
      yerr += dy;
      if (xerr > ds)
      {
        xerr -= ds;
        xs += inc_x;
      }
      if (yerr > ds)
      {
        yerr -= ds;
        ys += inc_y;
      }
    }
  }
}

/*!
  * @brief    画点
  *
  * @param    x ：x
  * @param    y ：y
  * @param    color_dat ：颜色
  *
  * @return   无
  *
  * @note     起始、终止横坐标(0-127)，纵坐标(0-159),显示颜色uint16
  *
  * @see      TFTSPI_Draw_Dot(10, 20, u16YELLOW);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_Draw_Dot(uint8_t x, uint8_t y, uint16_t color_dat)
{
  TFTSPI_Set_Pos(x, y, x, y);
  TFTSPI_Write_Word(color_dat);
}

/*!
  * @brief    显示图片
  *
  * @param    xs ：起始x
  * @param    ys ：起始y
  * @param    xe ：结束x
  * @param    ys ：结束y
  * @param    ppic ：图片数据
  *
  * @return   无
  *
  * @note     起始、终止横坐标(0-127)，纵坐标(0-159),显示颜色uint16
  *
  * @see
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_Show_Pic(uint8_t xs, uint8_t ys, uint8_t xe, uint8_t ye, const char *ppic)
{
  unsigned int i, j, k = 0;

  TFTSPI_Set_Pos(xs, ys, xe - 1, ye);
  for (i = 0; i < ye - ys; i++)
  {
    for (j = 0; j < xe - xs; j++)
    {
      TFTSPI_Write_Word(((uint16_t)ppic[k]) << 8 | ppic[k + 1]);
      k++;
      k++;
    }
  }
}
/** 字库
字库码的引索
--------------------------------------------------------------
(0)  !(1)  "(2)  #(3)  $(4)  %(5)  &(6)  '(7)
((8)  )(9)  *(10) +(11) ,(12) -(13) .(14) /(15)
0(16) 1(17) 2(18) 3(19) 4(20) 5(21) 6(22) 7(23)
8(24) 9(25) :(26) ;(27) <(28) =(29) >(30) ?(31)
@(32) A(33) B(34) C(35) D(36) E(37) F(38) G(39)
H(40) I(41) J(42) K(43) L(44) M(45) N(46) O(47)
P(48) Q(49) R(50) S(51) T(52) U(53) V(54) W(55)
X(56) Y(57) Z(58) [(59) \(60) ](61) ^(62) _(63)
`(64) a(65) b(66) c(67) d(68) e(69) f(70) g(71)
h(72) i(73) j(74) k(75) l(76) m(77) n(78) o(79)
p(80) q(81) r(82) s(83) t(84) u(85) v(86) w(87)
x(88) y(89) z(90) {(91) |(92) }(93) ~(94)
--------------------------------------------------------------
字体:	  8*6字体
取码规则:	低位在前, 列行扫描, 阴码(1-亮, 0-灭)
查表方法: 要显示的ASCII码-32就可以得到字库码的指针 */
const unsigned char Font_code8[][6] = {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // (0)
    {0x00, 0x00, 0x00, 0x4F, 0x00, 0x00},  //!(1)
    {0x00, 0x00, 0x07, 0x00, 0x07, 0x00},  //"(2)
    {0x00, 0x14, 0x7F, 0x14, 0x7F, 0x14},  //#(3)
    {0x00, 0x24, 0x2A, 0x7F, 0x2A, 0x12},  //$(4)
    {0x00, 0x23, 0x13, 0x08, 0x64, 0x62},  //%(5)
    {0x00, 0x36, 0x49, 0x55, 0x22, 0x50},  //&(6)
    {0x00, 0x00, 0x05, 0x03, 0x00, 0x00},  //'(7)
    {0x00, 0x00, 0x1C, 0x22, 0x41, 0x00},  //((8)
    {0x00, 0x00, 0x41, 0x22, 0x1C, 0x00},  //)(9)
    {0x00, 0x14, 0x08, 0x3E, 0x08, 0x14},  //*(10)
    {0x00, 0x08, 0x08, 0x3E, 0x08, 0x08},  //+(11)
    {0x00, 0x00, 0x50, 0x30, 0x00, 0x00},  //,(12)
    {0x00, 0x08, 0x08, 0x08, 0x08, 0x08},  //-(13)
    {0x00, 0x00, 0x60, 0x60, 0x00, 0x00},  //.(14)
    {0x00, 0x20, 0x10, 0x08, 0x04, 0x02},  ///(15)
    {0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E},  //0(16)
    {0x00, 0x00, 0x42, 0x7F, 0x40, 0x00},  //1(17)
    {0x00, 0x42, 0x61, 0x51, 0x49, 0x46},  //2(18)
    {0x00, 0x21, 0x41, 0x45, 0x4B, 0x31},  //3(19)
    {0x00, 0x18, 0x14, 0x12, 0x7F, 0x10},  //4(20)
    {0x00, 0x27, 0x45, 0x45, 0x45, 0x39},  //5(21)
    {0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30},  //6(22)
    {0x00, 0x01, 0x71, 0x09, 0x05, 0x03},  //7(23)
    {0x00, 0x36, 0x49, 0x49, 0x49, 0x36},  //8(24)
    {0x00, 0x06, 0x49, 0x49, 0x29, 0x1E},  //9(25)
    {0x00, 0x00, 0x36, 0x36, 0x00, 0x00},  //:(26)
    {0x00, 0x00, 0x56, 0x36, 0x00, 0x00},  //;(27)
    {0x00, 0x08, 0x14, 0x22, 0x41, 0x00},  //<(28)
    {0x00, 0x14, 0x14, 0x14, 0x14, 0x14},  //=(29)
    {0x00, 0x00, 0x41, 0x22, 0x14, 0x08},  //>(30)
    {0x00, 0x02, 0x01, 0x51, 0x09, 0x06},  //?(31)
    {0x00, 0x32, 0x49, 0x79, 0x41, 0x3E},  //@(32)
    {0x00, 0x7E, 0x11, 0x11, 0x11, 0x7E},  //A(33)
    {0x00, 0x7F, 0x49, 0x49, 0x49, 0x3E},  //B(34)
    {0x00, 0x3E, 0x41, 0x41, 0x41, 0x22},  //C(35)
    {0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C},  //D(36)
    {0x00, 0x7F, 0x49, 0x49, 0x49, 0x41},  //E(37)
    {0x00, 0x7F, 0x09, 0x09, 0x09, 0x01},  //F(38)
    {0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A},  //G(39)
    {0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F},  //H(40)
    {0x00, 0x00, 0x41, 0x7F, 0x41, 0x00},  //I(41)
    {0x00, 0x20, 0x40, 0x41, 0x3F, 0x01},  //J(42)
    {0x00, 0x7F, 0x08, 0x14, 0x22, 0x41},  //K(43)
    {0x00, 0x7F, 0x40, 0x40, 0x40, 0x40},  //L(44)
    {0x00, 0x7F, 0x02, 0x04, 0x02, 0x7F},  //M(45)
    {0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F},  //N(46)
    {0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E},  //O(47)
    {0x00, 0x7F, 0x09, 0x09, 0x09, 0x06},  //P(48)
    {0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E},  //Q(49)
    {0x00, 0x7F, 0x09, 0x19, 0x29, 0x46},  //R(50)
    {0x00, 0x46, 0x49, 0x49, 0x49, 0x31},  //S(51)
    {0x00, 0x01, 0x01, 0x7F, 0x01, 0x01},  //T(52)
    {0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F},  //U(53)
    {0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F},  //V(54)
    {0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F},  //W(55)
    {0x00, 0x63, 0x14, 0x08, 0x14, 0x63},  //X(56)
    {0x00, 0x03, 0x04, 0x78, 0x04, 0x03},  //Y(57)
    {0x00, 0x61, 0x51, 0x49, 0x45, 0x43},  //Z(58)
    {0x00, 0x00, 0x7F, 0x41, 0x41, 0x00},  //[(59)
    {0x00, 0x15, 0x16, 0x7C, 0x16, 0x15},  //\(60)
    {0x00, 0x00, 0x41, 0x41, 0x7F, 0x00},  //](61)
    {0x00, 0x04, 0x02, 0x01, 0x02, 0x04},  //^(62)
    {0x00, 0x40, 0x40, 0x40, 0x40, 0x40},  //_(63)
    {0x00, 0x00, 0x01, 0x02, 0x04, 0x00},  //`(64)
    {0x00, 0x20, 0x54, 0x54, 0x54, 0x78},  //a(65)
    {0x00, 0x7F, 0x48, 0x44, 0x44, 0x38},  //b(66)
    {0x00, 0x38, 0x44, 0x44, 0x44, 0x20},  //c(67)
    {0x00, 0x38, 0x44, 0x44, 0x48, 0x7F},  //d(68)
    {0x00, 0x38, 0x54, 0x54, 0x54, 0x18},  //e(69)
    {0x00, 0x08, 0x7E, 0x09, 0x01, 0x02},  //f(70)
    {0x00, 0x0C, 0x52, 0x52, 0x52, 0x3E},  //g(71)
    {0x00, 0x7F, 0x08, 0x04, 0x04, 0x78},  //h(72)
    {0x00, 0x00, 0x44, 0x7D, 0x40, 0x00},  //i(73)
    {0x00, 0x20, 0x40, 0x44, 0x3D, 0x00},  //j(74)
    {0x00, 0x7F, 0x10, 0x28, 0x44, 0x00},  //k(75)
    {0x00, 0x00, 0x41, 0x7F, 0x40, 0x00},  //l(76)
    {0x00, 0x7E, 0x02, 0x0C, 0x02, 0x7C},  //m(77)
    {0x00, 0x7E, 0x04, 0x02, 0x02, 0x7C},  //n(78)
    {0x00, 0x38, 0x44, 0x44, 0x44, 0x38},  //o(79)
    {0x00, 0x7C, 0x14, 0x14, 0x14, 0x08},  //p(80)
    {0x00, 0x08, 0x14, 0x14, 0x18, 0x7C},  //q(81)
    {0x00, 0x7C, 0x08, 0x04, 0x04, 0x08},  //r(82)
    {0x00, 0x48, 0x54, 0x54, 0x54, 0x20},  //s(83)
    {0x00, 0x04, 0x3F, 0x44, 0x40, 0x20},  //t(84)
    {0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C},  //u(85)
    {0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C},  //v(86)
    {0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C},  //w(87)
    {0x00, 0x44, 0x28, 0x10, 0x28, 0x44},  //x(88)
    {0x00, 0x0C, 0x50, 0x50, 0x50, 0x3C},  //y(89)
    {0x00, 0x44, 0x64, 0x54, 0x4C, 0x44},  //z(90)
    {0x00, 0x00, 0x08, 0x36, 0x41, 0x00},  //{(91)
    {0x00, 0x00, 0x00, 0x7F, 0x00, 0x00},  //|(92)
    {0x00, 0x00, 0x41, 0x36, 0x08, 0x00},  //}(93)
    {0x00, 0x08, 0x04, 0x08, 0x10, 0x08},  //~(94)
    {0x00, 0x08, 0x08, 0x2A, 0x1C, 0x08},  //→(127)
    {0x00, 0x08, 0x1C, 0x2A, 0x08, 0x08},  //←(128)
    {0x00, 0x04, 0x02, 0x7F, 0x02, 0x04},  //↑(129)
    {0x00, 0x10, 0x20, 0x7F, 0x20, 0x10},  //↓(130)
    {0x00, 0x1C, 0x2A, 0x32, 0x2A, 0x1C},  //笑面(131)
    {0x00, 0x1C, 0x22, 0x44, 0x22, 0x1C}}; //爱心(132)

/** 字库
字库码的引索
--------------------------------------------------------------
(0)  !(1)  "(2)  #(3)  $(4)  %(5)  &(6)  '(7)
((8)  )(9)  *(10) +(11) ,(12) -(13) .(14) /(15)
0(16) 1(17) 2(18) 3(19) 4(20) 5(21) 6(22) 7(23)
8(24) 9(25) :(26) ;(27) <(28) =(29) >(30) ?(31)
@(32) A(33) B(34) C(35) D(36) E(37) F(38) G(39)
H(40) I(41) J(42) K(43) L(44) M(45) N(46) O(47)
P(48) Q(49) R(50) S(51) T(52) U(53) V(54) W(55)
X(56) Y(57) Z(58) [(59) \(60) ](61) ^(62) _(63)
`(64) a(65) b(66) c(67) d(68) e(69) f(70) g(71)
h(72) i(73) j(74) k(75) l(76) m(77) n(78) o(79)
p(80) q(81) r(82) s(83) t(84) u(85) v(86) w(87)
x(88) y(89) z(90) {(91) |(92) }(93) ~(94)
--------------------------------------------------------------
字体:	  GulimChe12 8*16字体
取码规则:	低位在前, 列行扫描, 阴码(1-亮, 0-灭)
查表方法: 要显示的ASCII码-32就可以得到字库码的指针 */
const unsigned char Font_code16[][16] = {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // (0)
    {0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00}, //!(1)
    {0x00, 0x00, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //"(3)
    {0x00, 0x00, 0x48, 0x48, 0x48, 0xFE, 0x24, 0x24, 0x24, 0x24, 0x24, 0x7F, 0x12, 0x12, 0x12, 0x00}, //#(4)
    {0x00, 0x10, 0x7C, 0x92, 0x92, 0x12, 0x14, 0x18, 0x30, 0x50, 0x90, 0x92, 0x92, 0x7C, 0x10, 0x00}, //$(5)
    {0x00, 0x00, 0x8C, 0x92, 0x52, 0x32, 0x2C, 0x10, 0x08, 0x68, 0x94, 0x92, 0x92, 0x60, 0x00, 0x00}, //%(6)
    {0x00, 0x00, 0x18, 0x24, 0x24, 0x24, 0x18, 0x98, 0xA4, 0xA2, 0x42, 0x42, 0xA2, 0x9C, 0x00, 0x00}, //&(7)
    {0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //'(8)
    {0x00, 0x20, 0x10, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x10, 0x20, 0x00}, //((9)
    {0x00, 0x04, 0x08, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x08, 0x04, 0x00}, //)(10)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x2A, 0x1C, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //*(11)
    {0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0xFE, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00}, //+(12)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x08, 0x00}, //,(13)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //-(14)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00}, //.(15)
    {0x00, 0x00, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x00, 0x00}, ///(16)
    {0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00}, //0(17)
    {0x00, 0x00, 0x10, 0x1C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00},
    {0x00, 0x00, 0x3C, 0x42, 0x42, 0x40, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x02, 0x7E, 0x00, 0x00},
    {0x00, 0x00, 0x3C, 0x42, 0x42, 0x40, 0x40, 0x3C, 0x40, 0x40, 0x40, 0x42, 0x42, 0x3C, 0x00, 0x00},
    {0x00, 0x00, 0x60, 0x60, 0x50, 0x50, 0x48, 0x48, 0x44, 0x44, 0xFE, 0x40, 0x40, 0x40, 0x00, 0x00},
    {0x00, 0x00, 0x7E, 0x02, 0x02, 0x02, 0x3E, 0x42, 0x40, 0x40, 0x40, 0x42, 0x42, 0x3C, 0x00, 0x00},
    {0x00, 0x00, 0x3C, 0x42, 0x42, 0x02, 0x02, 0x3E, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00},
    {0x00, 0x00, 0x7E, 0x40, 0x20, 0x20, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00},
    {0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00},
    {0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7C, 0x40, 0x40, 0x42, 0x42, 0x3C, 0x00, 0x00}, //9(25)
    {0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00}, //:(26)
    {0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x08, 0x00, 0x00}, //;(27)
    {0x00, 0x00, 0x00, 0x40, 0x30, 0x08, 0x06, 0x01, 0x06, 0x08, 0x30, 0x40, 0x00, 0x00, 0x00, 0x00}, //<(28)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //=(29)
    {0x00, 0x00, 0x00, 0x02, 0x0C, 0x10, 0x60, 0x80, 0x60, 0x10, 0x0C, 0x02, 0x00, 0x00, 0x00, 0x00}, //>(30)
    {0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0x40, 0x20, 0x10, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x00}, //?(31)
    {0x00, 0x00, 0x38, 0x44, 0x82, 0xB2, 0xAA, 0xAA, 0xAA, 0xAA, 0xD2, 0x02, 0x84, 0x78, 0x00, 0x00}, //@(32)
    {0x00, 0x00, 0x10, 0x10, 0x10, 0x28, 0x28, 0x28, 0x44, 0x44, 0x7C, 0x82, 0x82, 0x82, 0x00, 0x00}, //A(33)
    {0x00, 0x00, 0x3E, 0x42, 0x82, 0x82, 0x42, 0x3E, 0x42, 0x82, 0x82, 0x82, 0x42, 0x3E, 0x00, 0x00},
    {0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0x02, 0x02, 0x02, 0x02, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00},
    {0x00, 0x00, 0x3E, 0x42, 0x42, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x42, 0x42, 0x3E, 0x00, 0x00},
    {0x00, 0x00, 0xFE, 0x02, 0x02, 0x02, 0x02, 0x7E, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x00, 0x00},
    {0x00, 0x00, 0xFE, 0x02, 0x02, 0x02, 0x02, 0x7E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00},
    {0x00, 0x00, 0x38, 0x44, 0x82, 0x02, 0x02, 0x02, 0xE2, 0x82, 0x82, 0x82, 0xC4, 0xB8, 0x00, 0x00},
    {0x00, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0xFE, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00},
    {0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00},
    {0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x22, 0x1C, 0x00, 0x00},
    {0x00, 0x00, 0x82, 0x42, 0x22, 0x12, 0x0A, 0x06, 0x06, 0x0A, 0x12, 0x22, 0x42, 0x82, 0x00, 0x00},
    {0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x7E, 0x00, 0x00},
    {0x00, 0x00, 0x82, 0x82, 0xC6, 0xC6, 0xAA, 0xAA, 0x92, 0x92, 0x92, 0x82, 0x82, 0x82, 0x00, 0x00},
    {0x00, 0x00, 0x82, 0x86, 0x86, 0x8A, 0x8A, 0x92, 0x92, 0xA2, 0xA2, 0xC2, 0xC2, 0x82, 0x00, 0x00},
    {0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00},
    {0x00, 0x00, 0x3E, 0x42, 0x82, 0x82, 0x82, 0x42, 0x3E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00},
    {0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0xA2, 0x44, 0xB8, 0x00, 0x00},
    {0x00, 0x00, 0x3E, 0x42, 0x82, 0x82, 0x82, 0x42, 0x3E, 0x42, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00},
    {0x00, 0x00, 0x7C, 0x82, 0x82, 0x02, 0x04, 0x18, 0x20, 0x40, 0x80, 0x82, 0x82, 0x7C, 0x00, 0x00},
    {0x00, 0x00, 0xFE, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00},
    {0x00, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7C, 0x00, 0x00},
    {0x00, 0x00, 0x82, 0x82, 0x82, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x00, 0x00},
    {0x00, 0x00, 0x92, 0x92, 0x92, 0x92, 0x92, 0xAA, 0xAA, 0xAA, 0x44, 0x44, 0x44, 0x44, 0x00, 0x00},
    {0x00, 0x00, 0x82, 0x82, 0x44, 0x44, 0x28, 0x10, 0x28, 0x28, 0x44, 0x44, 0x82, 0x82, 0x00, 0x00},
    {0x00, 0x00, 0x82, 0x82, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00},
    {0x00, 0x00, 0x7E, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x02, 0x7E, 0x00, 0x00},
    {0x00, 0x78, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x78, 0x00},
    {0x00, 0x00, 0x92, 0x92, 0x92, 0xFF, 0x92, 0xAA, 0xAA, 0xAA, 0x44, 0x44, 0x44, 0x44, 0x00, 0x00},
    {0x00, 0x1E, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1E, 0x00},
    {0x00, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00},
    {0x00, 0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x40, 0x7C, 0x42, 0x42, 0x42, 0xBC, 0x00, 0x00},
    {0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x3A, 0x46, 0x82, 0x82, 0x82, 0x82, 0x46, 0x3A, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x84, 0x02, 0x02, 0x02, 0x02, 0x84, 0x78, 0x00, 0x00},
    {0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xB8, 0xC4, 0x82, 0x82, 0x82, 0x82, 0xC4, 0xB8, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x82, 0xFE, 0x02, 0x02, 0x84, 0x78, 0x00, 0x00},
    {0x00, 0x00, 0x70, 0x08, 0x08, 0x08, 0x7E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x64, 0x42, 0x42, 0x42, 0x64, 0x58, 0x42, 0x3C, 0x00},
    {0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x3A, 0x46, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00},
    {0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00},
    {0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0C, 0x00},
    {0x00, 0x00, 0x02, 0x02, 0x02, 0x42, 0x22, 0x12, 0x0A, 0x06, 0x0A, 0x12, 0x22, 0x42, 0x00, 0x00},
    {0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3A, 0x46, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3A, 0x46, 0x82, 0x82, 0x82, 0x46, 0x3A, 0x02, 0x02, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0xC4, 0x82, 0x82, 0x82, 0xC4, 0xB8, 0x80, 0x80, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x02, 0x0C, 0x30, 0x40, 0x42, 0x3C, 0x00, 0x00},
    {0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x7E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x70, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7C, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x82, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x92, 0x92, 0x92, 0xAA, 0x6C, 0x44, 0x44, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x44, 0x28, 0x10, 0x10, 0x28, 0x44, 0x82, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x82, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10, 0x0E, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x7E, 0x00, 0x00},
    {0x00, 0x60, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x60, 0x00},
    {0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00},
    {0x00, 0x06, 0x08, 0x08, 0x08, 0x08, 0x08, 0x30, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x06, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
};

/* MDK AC6编译器不支持 GB3212编码的中文 因此会出现警告 不影响正常使用 忽略即可 */
/** 简单的汉字字库 */
const unsigned char hanzi_Idx[] =
    {
        "北京龙邱丘智能科技淘宝店液晶单片机智能车器人启动中电压量不足请稍候，！：℃攻击娱乐模式普通格斗对话俯卧撑倒立握手敬礼跳舞蹈运动蓝精灵太极街舞温度—"};

/** 14*16 简单的汉字字库*/
const unsigned char hanzi[] = {
    //取码规则:	高位在前, 行扫描, 阴码(1-亮, 0-灭)
    //查表方法: 要显示的ASCII码-32就可以得到字库码的指针 微软雅黑16*12    °
    0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x08, 0x80, 0x08, 0x8C, 0xF8, 0xF0,
    0x08, 0x80, 0x08, 0x80, 0x38, 0x84, 0xC8, 0x84, 0x08, 0xF8, 0x00, 0x00, //北0
    0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFC, 0x3F, 0xF0, 0x20, 0x10,
    0x20, 0x10, 0x3F, 0xF0, 0x19, 0x60, 0x31, 0x18, 0xC7, 0x0C, 0x00, 0x00, //京1
    0x00, 0x00, 0x00, 0x00, 0x04, 0x60, 0x04, 0x30, 0x7F, 0xFC, 0x04, 0x88,
    0x04, 0x90, 0x08, 0xE0, 0x09, 0x84, 0x36, 0x84, 0x60, 0xF8, 0x00, 0x00, //龙2
    0x00, 0x00, 0x0E, 0x00, 0x78, 0xF8, 0x40, 0x88, 0x40, 0x90, 0x7E, 0xA0,
    0x48, 0x90, 0x48, 0x88, 0x48, 0x88, 0x4A, 0xF0, 0xF4, 0x80, 0x00, 0x80, //邱3
    0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x1F, 0x80, 0x10, 0x00, 0x10, 0x00,
    0x1F, 0xF8, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x7F, 0xFC, 0x00, 0x00, //丘4
    0x00, 0x00, 0x20, 0x00, 0x7E, 0xF8, 0x90, 0x88, 0xFE, 0x88, 0x38, 0xF8,
    0xC6, 0x00, 0x3F, 0xF0, 0x3F, 0xF0, 0x20, 0x10, 0x3F, 0xF0, 0x00, 0x00, //智5
    0x00, 0x00, 0x00, 0x00, 0x30, 0x8C, 0x46, 0xF4, 0xFF, 0x84, 0x7E, 0xF8,
    0x42, 0x84, 0x7E, 0x98, 0x7E, 0xE4, 0x42, 0x84, 0x4E, 0xFC, 0x00, 0x00, //能6
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x7D, 0x90, 0x10, 0xD0, 0x7F, 0x10,
    0x19, 0x90, 0x37, 0xFC, 0x50, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, //科7
    0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0xFF, 0xFC, 0x20, 0x40, 0x27, 0xF8,
    0x32, 0x08, 0xE1, 0x10, 0x20, 0xE0, 0x21, 0xE0, 0xEE, 0x1C, 0x00, 0x00, //技8
    0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x37, 0xF8, 0x6A, 0x08, 0x37, 0xE8,
    0x0F, 0xF8, 0x24, 0xA8, 0x24, 0xA8, 0x47, 0xE8, 0x40, 0x78, 0x00, 0x00, //淘9
    0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x7F, 0xF8, 0x40, 0x08, 0x7F, 0xF8,
    0x02, 0x00, 0x3F, 0xF0, 0x02, 0x60, 0x02, 0x10, 0x7F, 0xF8, 0x00, 0x00, //宝10
    0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x3F, 0xF8, 0x21, 0x00, 0x21, 0xF8,
    0x21, 0x00, 0x2F, 0xF0, 0x28, 0x10, 0x68, 0x10, 0x4F, 0xF0, 0x00, 0x00, //店11
    0x00, 0x00, 0x00, 0x00, 0x60, 0xC0, 0x3F, 0xFC, 0x62, 0x40, 0x34, 0xF8,
    0x0D, 0x48, 0x36, 0xB0, 0x24, 0x60, 0x44, 0xE0, 0x47, 0x1C, 0x00, 0x00, //液12
    0x00, 0x00, 0x00, 0x00, 0x3F, 0xF0, 0x20, 0x10, 0x3F, 0xF0, 0x3F, 0xF0,
    0x7C, 0xF8, 0x44, 0x88, 0x7C, 0xF8, 0x44, 0x88, 0x7C, 0xF8, 0x44, 0x88, //晶13
    0x00, 0x00, 0x10, 0x20, 0x08, 0xC0, 0x3F, 0xF0, 0x22, 0x10, 0x3F, 0xF0,
    0x22, 0x10, 0x3F, 0xF0, 0x02, 0x00, 0x7F, 0xF8, 0x02, 0x00, 0x02, 0x00, //单14
    0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x1F, 0xFC,
    0x10, 0x00, 0x1F, 0xE0, 0x10, 0x20, 0x20, 0x20, 0x60, 0x20, 0x00, 0x00, //片15
    0x00, 0x00, 0x20, 0x00, 0x23, 0xE0, 0xFA, 0x20, 0x22, 0x20, 0x72, 0x20,
    0x6A, 0x20, 0xA2, 0x20, 0xA2, 0x24, 0x24, 0x24, 0x28, 0x38, 0x00, 0x00, //机16
    0x00, 0x00, 0x20, 0x00, 0x7E, 0xF8, 0x90, 0x88, 0xFE, 0x88, 0x38, 0xF8,
    0xC6, 0x00, 0x3F, 0xF0, 0x3F, 0xF0, 0x20, 0x10, 0x3F, 0xF0, 0x00, 0x00, //智17
    0x00, 0x00, 0x00, 0x00, 0x30, 0x8C, 0x46, 0xF4, 0xFF, 0x84, 0x7E, 0xF8,
    0x42, 0x84, 0x7E, 0x98, 0x7E, 0xE4, 0x42, 0x84, 0x4E, 0xFC, 0x00, 0x00, //能18
    0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x7F, 0xF8, 0x11, 0x00, 0x31, 0x00,
    0x3F, 0xF0, 0x01, 0x00, 0x01, 0x00, 0xFF, 0xFC, 0x01, 0x00, 0x01, 0x00, //车19
};

/** 16*16 简单的汉字字库*/
const unsigned char hanzi16x16[] = {
    //列行式 14*16
    0x04, 0x40, 0x04, 0x40, 0x04, 0x40, 0x04, 0x44, 0x04, 0x48, 0x7C, 0x50, 0x04, 0x60, 0x04, 0x40,
    0x04, 0x40, 0x04, 0x40, 0x04, 0x40, 0x04, 0x42, 0x1C, 0x42, 0xE4, 0x42, 0x44, 0x3E, 0x04, 0x00, //北,0
    0x02, 0x00, 0x01, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF0, 0x10, 0x10, 0x10, 0x10,
    0x10, 0x10, 0x1F, 0xF0, 0x01, 0x00, 0x11, 0x10, 0x11, 0x08, 0x21, 0x04, 0x45, 0x04, 0x02, 0x00, //京,1
    0x04, 0x20, 0x04, 0x10, 0x04, 0x10, 0x04, 0x00, 0xFF, 0xFE, 0x04, 0x80, 0x04, 0x88, 0x04, 0x88,
    0x04, 0x90, 0x08, 0xA0, 0x08, 0xC0, 0x10, 0x82, 0x11, 0x82, 0x22, 0x82, 0x44, 0x7E, 0x80, 0x00, //龙,2
    0x00, 0x00, 0x03, 0x3E, 0x3C, 0x22, 0x20, 0x24, 0x20, 0x24, 0x20, 0x28, 0x3F, 0xA4, 0x22, 0x24,
    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x34, 0x27, 0xA8, 0xF8, 0x20, 0x40, 0x20, 0x00, 0x20, //邱,3
    0x00, 0x10, 0x00, 0x78, 0x1F, 0x80, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x1F, 0xFC,
    0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0xFF, 0xFE, 0x00, 0x00, //丘,4
    0x20, 0x00, 0x3E, 0x7C, 0x48, 0x44, 0x08, 0x44, 0xFF, 0x44, 0x14, 0x44, 0x22, 0x7C, 0x40, 0x00,
    0x1F, 0xF0, 0x10, 0x10, 0x10, 0x10, 0x1F, 0xF0, 0x10, 0x10, 0x10, 0x10, 0x1F, 0xF0, 0x10, 0x10, //智,5
    0x10, 0x40, 0x24, 0x44, 0x42, 0x48, 0xFF, 0x70, 0x01, 0x40, 0x00, 0x42, 0x7E, 0x42, 0x42, 0x3E,
    0x42, 0x00, 0x7E, 0x44, 0x42, 0x48, 0x42, 0x70, 0x7E, 0x40, 0x42, 0x42, 0x4A, 0x42, 0x44, 0x3E, //能,6
    0x08, 0x10, 0x1D, 0x10, 0xF0, 0x90, 0x10, 0x90, 0x10, 0x10, 0xFD, 0x10, 0x10, 0x90, 0x38, 0x90,
    0x34, 0x10, 0x50, 0x1E, 0x53, 0xF0, 0x90, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, //科,7
    0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x13, 0xFE, 0xFC, 0x20, 0x10, 0x20, 0x10, 0x20, 0x15, 0xFC,
    0x18, 0x84, 0x30, 0x88, 0xD0, 0x48, 0x10, 0x50, 0x10, 0x20, 0x10, 0x50, 0x51, 0x88, 0x26, 0x06, //技,8
    0x01, 0x00, 0x21, 0x00, 0x11, 0xFC, 0x12, 0x04, 0x85, 0x04, 0x41, 0xE4, 0x42, 0x84, 0x10, 0x84,
    0x17, 0xF4, 0x20, 0x84, 0xE2, 0xA4, 0x22, 0xA4, 0x23, 0xE4, 0x20, 0x04, 0x20, 0x28, 0x00, 0x10, //淘,9
    0x02, 0x00, 0x01, 0x00, 0x7F, 0xFE, 0x40, 0x02, 0x80, 0x04, 0x00, 0x00, 0x7F, 0xFC, 0x01, 0x00,
    0x01, 0x00, 0x01, 0x00, 0x3F, 0xF8, 0x01, 0x00, 0x01, 0x20, 0x01, 0x10, 0xFF, 0xFE, 0x00, 0x00, //宝,10
    0x01, 0x00, 0x00, 0x80, 0x3F, 0xFE, 0x20, 0x80, 0x20, 0x80, 0x20, 0x80, 0x20, 0xFC, 0x20, 0x80,
    0x20, 0x80, 0x27, 0xF8, 0x24, 0x08, 0x24, 0x08, 0x44, 0x08, 0x44, 0x08, 0x87, 0xF8, 0x04, 0x08, //店,11
    0x00, 0x80, 0x20, 0x40, 0x17, 0xFE, 0x11, 0x20, 0x81, 0x20, 0x42, 0x3C, 0x42, 0x44, 0x16, 0x64,
    0x12, 0x94, 0x23, 0x48, 0xE2, 0x48, 0x22, 0x30, 0x22, 0x20, 0x22, 0x50, 0x22, 0x88, 0x03, 0x06, //液,12
    0x0F, 0xE0, 0x08, 0x20, 0x08, 0x20, 0x0F, 0xE0, 0x08, 0x20, 0x08, 0x20, 0x0F, 0xE0, 0x00, 0x00,
    0x7E, 0xFC, 0x42, 0x84, 0x42, 0x84, 0x7E, 0xFC, 0x42, 0x84, 0x42, 0x84, 0x7E, 0xFC, 0x42, 0x84, //晶,13
    0x10, 0x10, 0x08, 0x20, 0x04, 0x40, 0x3F, 0xF8, 0x21, 0x08, 0x21, 0x08, 0x3F, 0xF8, 0x21, 0x08,
    0x21, 0x08, 0x3F, 0xF8, 0x01, 0x00, 0x01, 0x00, 0xFF, 0xFE, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, //单,14
    0x00, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x1F, 0xFC, 0x10, 0x00, 0x10, 0x00,
    0x10, 0x00, 0x1F, 0xE0, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x20, //片,15
    0x10, 0x00, 0x11, 0xF0, 0x11, 0x10, 0x11, 0x10, 0xFD, 0x10, 0x11, 0x10, 0x31, 0x10, 0x39, 0x10,
    0x55, 0x10, 0x55, 0x10, 0x91, 0x10, 0x11, 0x12, 0x11, 0x12, 0x12, 0x12, 0x12, 0x0E, 0x14, 0x00, //机,16
    0x20, 0x00, 0x3E, 0x7C, 0x48, 0x44, 0x08, 0x44, 0xFF, 0x44, 0x14, 0x44, 0x22, 0x7C, 0x40, 0x00,
    0x1F, 0xF0, 0x10, 0x10, 0x10, 0x10, 0x1F, 0xF0, 0x10, 0x10, 0x10, 0x10, 0x1F, 0xF0, 0x10, 0x10, //智,17
    0x10, 0x40, 0x24, 0x44, 0x42, 0x48, 0xFF, 0x70, 0x01, 0x40, 0x00, 0x42, 0x7E, 0x42, 0x42, 0x3E,
    0x42, 0x00, 0x7E, 0x44, 0x42, 0x48, 0x42, 0x70, 0x7E, 0x40, 0x42, 0x42, 0x4A, 0x42, 0x44, 0x3E, //能,18
    0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x7F, 0xFC, 0x04, 0x00, 0x09, 0x00, 0x11, 0x00, 0x21, 0x00,
    0x3F, 0xF8, 0x01, 0x00, 0x01, 0x00, 0xFF, 0xFE, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, //车,19
    0x00, 0x00, 0x3E, 0x7C, 0x22, 0x44, 0x22, 0x44, 0x3E, 0x7C, 0x01, 0x20, 0x01, 0x10, 0xFF, 0xFE,
    0x02, 0x80, 0x0C, 0x60, 0x30, 0x18, 0xC0, 0x06, 0x3E, 0x7C, 0x22, 0x44, 0x22, 0x44, 0x3E, 0x7C, //器,20
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x80, 0x02, 0x80,
    0x04, 0x40, 0x04, 0x40, 0x08, 0x20, 0x08, 0x20, 0x10, 0x10, 0x20, 0x08, 0x40, 0x04, 0x80, 0x02, //人,21
    0x01, 0x00, 0x00, 0x80, 0x1F, 0xFC, 0x10, 0x04, 0x10, 0x04, 0x10, 0x04, 0x1F, 0xFC, 0x10, 0x00,
    0x10, 0x00, 0x10, 0x00, 0x17, 0xFC, 0x24, 0x04, 0x24, 0x04, 0x44, 0x04, 0x87, 0xFC, 0x04, 0x04, //启,22
    0x00, 0x40, 0x00, 0x40, 0x7C, 0x40, 0x00, 0x40, 0x01, 0xFC, 0x00, 0x44, 0xFE, 0x44, 0x20, 0x44,
    0x20, 0x44, 0x20, 0x84, 0x48, 0x84, 0x44, 0x84, 0xFD, 0x04, 0x45, 0x04, 0x02, 0x28, 0x04, 0x10, //动,23
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x3F, 0xF8, 0x21, 0x08, 0x21, 0x08, 0x21, 0x08,
    0x21, 0x08, 0x21, 0x08, 0x3F, 0xF8, 0x21, 0x08, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, //中,24
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x3F, 0xF8, 0x21, 0x08, 0x21, 0x08, 0x21, 0x08, 0x3F, 0xF8,
    0x21, 0x08, 0x21, 0x08, 0x21, 0x08, 0x3F, 0xF8, 0x21, 0x0A, 0x01, 0x02, 0x01, 0x02, 0x00, 0xFE, //电,25
    0x00, 0x00, 0x3F, 0xFE, 0x20, 0x00, 0x20, 0x80, 0x20, 0x80, 0x20, 0x80, 0x20, 0x80, 0x2F, 0xFC,
    0x20, 0x80, 0x20, 0x80, 0x20, 0x90, 0x20, 0x88, 0x20, 0x88, 0x40, 0x80, 0x5F, 0xFE, 0x80, 0x00, //压,26
    0x00, 0x00, 0x1F, 0xF0, 0x10, 0x10, 0x1F, 0xF0, 0x10, 0x10, 0xFF, 0xFE, 0x00, 0x00, 0x1F, 0xF0,
    0x11, 0x10, 0x1F, 0xF0, 0x11, 0x10, 0x1F, 0xF0, 0x01, 0x00, 0x1F, 0xF0, 0x01, 0x00, 0x7F, 0xFC, //量,27
    0x00, 0x00, 0x7F, 0xFC, 0x00, 0x80, 0x00, 0x80, 0x01, 0x00, 0x01, 0x00, 0x03, 0x40, 0x05, 0x20,
    0x09, 0x10, 0x11, 0x08, 0x21, 0x04, 0x41, 0x04, 0x81, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, //不,28
    0x00, 0x00, 0x1F, 0xF0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F, 0xF0, 0x01, 0x00,
    0x01, 0x00, 0x11, 0x00, 0x11, 0xF8, 0x11, 0x00, 0x29, 0x00, 0x25, 0x00, 0x43, 0xFE, 0x80, 0x00, //足,29
    0x00, 0x40, 0x40, 0x40, 0x27, 0xFC, 0x20, 0x40, 0x03, 0xF8, 0x00, 0x40, 0xE7, 0xFE, 0x20, 0x00,
    0x23, 0xF8, 0x22, 0x08, 0x23, 0xF8, 0x22, 0x08, 0x2B, 0xF8, 0x32, 0x08, 0x22, 0x28, 0x02, 0x10, //请,30
    0x08, 0x20, 0x1D, 0x24, 0xF0, 0xA4, 0x10, 0xA8, 0x10, 0x20, 0xFD, 0xFC, 0x11, 0x04, 0x31, 0x04,
    0x39, 0xFC, 0x55, 0x04, 0x55, 0x04, 0x91, 0xFC, 0x11, 0x04, 0x11, 0x04, 0x11, 0x14, 0x11, 0x08, //稍,31
    0x10, 0x00, 0x13, 0xF8, 0x10, 0x08, 0x28, 0x08, 0x2F, 0xFE, 0x69, 0x00, 0x69, 0x00, 0xAB, 0xF8,
    0x2C, 0x40, 0x28, 0x40, 0x2F, 0xFE, 0x28, 0x40, 0x28, 0xA0, 0x21, 0x10, 0x22, 0x08, 0x2C, 0x06, //候,32
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x38, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x00, //，,33
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x0E, 0x00,
    0x0C, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, //！,34
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, //：,35
    0x60, 0x00, 0x91, 0xF4, 0x96, 0x0C, 0x6C, 0x04, 0x08, 0x04, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00,
    0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x08, 0x00, 0x0C, 0x04, 0x06, 0x08, 0x01, 0xF0, 0x00, 0x00, //℃,36
    0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0xFF, 0xC0, 0x18, 0xFF, 0x19, 0x8C, 0x1B, 0xCC, 0x18, 0xCC,
    0x18, 0xCC, 0x18, 0x78, 0x18, 0x78, 0x1F, 0x30, 0xF8, 0x78, 0x60, 0xCC, 0x01, 0x86, 0xFF, 0xFF, //攻,36
    0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x3F, 0xFC, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0xFF, 0xFF,
    0x01, 0x80, 0x01, 0x80, 0x31, 0x8C, 0x31, 0x8C, 0x31, 0x8C, 0x31, 0x8C, 0x3F, 0xFC, 0xFF, 0xFF, //击,37
    0x30, 0x00, 0x33, 0xFC, 0x33, 0x0C, 0x33, 0x0C, 0xFF, 0xFC, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0xFC,
    0xCC, 0x60, 0x6C, 0x60, 0x3F, 0xFF, 0x18, 0x60, 0x3C, 0xF0, 0x6D, 0x98, 0xC3, 0x0C, 0xFF, 0xFF, //娱,38
    0x00, 0x30, 0x00, 0xF8, 0x1F, 0x80, 0x18, 0x00, 0x19, 0x80, 0x31, 0x80, 0x31, 0x80, 0x3F, 0xFE,
    0x01, 0x80, 0x0D, 0xB0, 0x0D, 0x98, 0x19, 0x8C, 0x31, 0x86, 0x61, 0x86, 0x07, 0x80, 0xFF, 0xFF, //乐,39
    0x19, 0x98, 0x19, 0x98, 0x1F, 0xFE, 0x19, 0x98, 0xFE, 0x00, 0x1B, 0xFC, 0x3B, 0x0C, 0x3F, 0xFC,
    0x7F, 0x0C, 0x7B, 0xFC, 0xD8, 0x60, 0x1F, 0xFE, 0x18, 0xF0, 0x19, 0x98, 0x1B, 0x0C, 0xFF, 0xFF, //模,40
    0x00, 0x6C, 0x00, 0x66, 0x00, 0x66, 0x00, 0x60, 0xFF, 0xFF, 0x00, 0x60, 0x00, 0x60, 0x3F, 0x60,
    0x0C, 0x60, 0x0C, 0x60, 0x0C, 0x30, 0x0C, 0x33, 0x0F, 0x9B, 0x7C, 0x0F, 0x30, 0x07, 0xFF, 0xFF, //式,41
    0x0C, 0x30, 0x06, 0x60, 0x7F, 0xFE, 0x06, 0x60, 0x36, 0x6C, 0x1E, 0x78, 0xFF, 0xFF, 0x00, 0x00,
    0x1F, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x1F, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x1F, 0xF8, 0x18, 0x18, //普0
    0x00, 0x00, 0x67, 0xFC, 0x30, 0x18, 0x31, 0xF0, 0x00, 0x60, 0x07, 0xFE, 0xF6, 0x66, 0x36, 0x66,
    0x37, 0xFE, 0x36, 0x66, 0x36, 0x66, 0x37, 0xFE, 0x36, 0x66, 0x36, 0x7E, 0x7E, 0x0C, 0xCF, 0xFF, //通1
    0x18, 0xC0, 0x18, 0xC0, 0x18, 0xFC, 0x19, 0x8C, 0xFF, 0x98, 0x1E, 0xF0, 0x38, 0x60, 0x3C, 0xF0,
    0x7F, 0x9C, 0x7B, 0x07, 0xDF, 0xFC, 0x19, 0x8C, 0x19, 0x8C, 0x19, 0x8C, 0x19, 0xFC, 0x19, 0x8C, //格2
    0x00, 0x60, 0x06, 0x60, 0x03, 0x60, 0x03, 0x60, 0x18, 0x60, 0x0C, 0x60, 0x0C, 0x60, 0x00, 0x60,
    0x00, 0xFF, 0x7F, 0xE0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, //斗3
    0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x7F, 0x18, 0x03, 0xFF, 0x03, 0x18, 0x36, 0x18, 0x1E, 0xD8,
    0x0C, 0x78, 0x0C, 0x78, 0x1E, 0x18, 0x1B, 0x18, 0x33, 0x18, 0x60, 0x18, 0x00, 0x78, 0x00, 0x30, //对4
    0x00, 0x0C, 0x30, 0x3E, 0x19, 0xF0, 0x18, 0x30, 0x00, 0x30, 0x03, 0xFF, 0xF8, 0x30, 0x18, 0x30,
    0x18, 0x30, 0x19, 0xFE, 0x19, 0x86, 0x19, 0x86, 0x1F, 0x86, 0x1D, 0x86, 0x19, 0xFE, 0x01, 0x86, //话5
    0x18, 0x60, 0x18, 0x30, 0x1F, 0xFF, 0x36, 0x00, 0x36, 0xCC, 0x76, 0xCC, 0x77, 0x8C, 0xF7, 0xFF,
    0x37, 0x8C, 0x37, 0xEC, 0x37, 0xBC, 0x37, 0xBC, 0x3D, 0x8C, 0x3D, 0x8C, 0x39, 0xBC, 0x31, 0x98, //俯,42
    0x00, 0x30, 0x7F, 0xF0, 0x6C, 0x30, 0x6C, 0x30, 0x6C, 0x30, 0x7F, 0xB8, 0x61, 0xBC, 0x61, 0xB6,
    0x61, 0xB3, 0x7F, 0xB3, 0x6C, 0x30, 0x6C, 0x30, 0x6C, 0x30, 0x7F, 0xF0, 0x00, 0x30, 0x00, 0x30, //卧,43
    0x19, 0xB6, 0x18, 0xFC, 0x1B, 0xFF, 0x1B, 0x03, 0xFE, 0xFC, 0x18, 0xCC, 0x18, 0xFC, 0x1E, 0x0E,
    0x1D, 0xF8, 0x38, 0x30, 0xF9, 0xFE, 0x18, 0x30, 0x1B, 0xFF, 0x18, 0x30, 0x78, 0xF0, 0x30, 0x60, //撑,44
    0x18, 0x06, 0x18, 0x06, 0x1F, 0xE6, 0x33, 0x1E, 0x33, 0x1E, 0x76, 0xDE, 0x77, 0xFE, 0xF1, 0x9E,
    0x31, 0x9E, 0x37, 0xFE, 0x31, 0x9E, 0x31, 0x9E, 0x31, 0xE6, 0x3F, 0x06, 0x36, 0x1E, 0x30, 0x0C, //倒,45
    0x03, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18,
    0x0C, 0x30, 0x0C, 0x30, 0x06, 0x60, 0x06, 0x60, 0x06, 0xC0, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, //立,46
    0x30, 0x00, 0x33, 0xFE, 0x33, 0x06, 0x33, 0x06, 0xFF, 0xFE, 0x33, 0x00, 0x33, 0xFE, 0x3F, 0x60,
    0x3B, 0xCC, 0xF3, 0xFE, 0x33, 0x36, 0x33, 0x30, 0x37, 0xFE, 0x36, 0x30, 0xFC, 0x30, 0x7B, 0xFF, //握,47
    0x00, 0x18, 0x00, 0xFC, 0x3F, 0x80, 0x01, 0x80, 0x01, 0x80, 0x3F, 0xFC, 0x01, 0x80, 0x01, 0x80,
    0x01, 0x80, 0xFF, 0xFF, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x07, 0x80, 0x03, 0x00, //手,48
    0x33, 0x30, 0x33, 0x30, 0xFF, 0xF0, 0x33, 0x3F, 0x60, 0x66, 0x7F, 0xE6, 0x61, 0xE6, 0xC1, 0xF6,
    0x7F, 0xBC, 0x67, 0xBC, 0x67, 0x98, 0x7F, 0x98, 0x67, 0xBC, 0x01, 0xBC, 0x0F, 0x66, 0x06, 0xC3, //敬,49
    0x30, 0xC0, 0x18, 0xC0, 0x18, 0xC0, 0xFC, 0xC0, 0x0C, 0xC0, 0x18, 0xC0, 0x18, 0xC0, 0x3C, 0xC0,
    0x7E, 0xC0, 0xDE, 0xC0, 0x18, 0xC0, 0x18, 0xC6, 0x18, 0xC6, 0x18, 0xC6, 0x18, 0x7E, 0x18, 0x00, //礼,50
    0x00, 0x78, 0x7E, 0x78, 0x66, 0x78, 0x67, 0xFB, 0x66, 0xFE, 0x7E, 0x7C, 0x18, 0x78, 0x18, 0x7C,
    0x18, 0xFE, 0x7F, 0xFB, 0x78, 0x78, 0x78, 0x78, 0x78, 0xDB, 0x7E, 0xDB, 0xF1, 0x9B, 0x03, 0x0F, //跳,51
    0x18, 0x00, 0x3F, 0xFE, 0x6F, 0xF0, 0x0F, 0xF0, 0x7F, 0xFE, 0x0F, 0xF0, 0x0F, 0xF0, 0x7F, 0xFE,
    0x18, 0x18, 0x18, 0x18, 0x3F, 0xFE, 0x63, 0x18, 0x1E, 0xD8, 0x0C, 0xFF, 0x38, 0x18, 0xE0, 0x18, //舞,52
    0xFF, 0xE1, 0x82, 0x1F, 0xBB, 0xDD, 0xBA, 0xED, 0xBB, 0x6B, 0x83, 0x7F, 0xEF, 0xDF, 0xEE, 0x31,
    0xEE, 0xFD, 0xA2, 0xFD, 0xAE, 0x31, 0xAE, 0xFD, 0xAE, 0xFD, 0xA2, 0xFD, 0x1E, 0x01, 0xFE, 0xFD, //蹈,53
    0x00, 0x00, 0x33, 0xFC, 0x18, 0x00, 0x18, 0x00, 0x00, 0x00, 0x07, 0xFE, 0xF8, 0x60, 0x18, 0xC0,
    0x19, 0x98, 0x1B, 0x0C, 0x1F, 0xFE, 0x1B, 0x06, 0x18, 0x00, 0x3C, 0x00, 0x67, 0xFF, 0x00, 0x00, //运,54
    0x00, 0x60, 0x00, 0x60, 0x7E, 0x60, 0x00, 0x60, 0x01, 0xFE, 0x00, 0x66, 0xFF, 0x66, 0x30, 0x66,
    0x30, 0x66, 0x30, 0xC6, 0x6C, 0xC6, 0x66, 0xC6, 0xFF, 0x86, 0x67, 0x86, 0x03, 0x3C, 0x06, 0x18, //动,55
    0x08, 0x20, 0x08, 0x20, 0xFF, 0xFE, 0x08, 0x20, 0x04, 0x80, 0x24, 0x80, 0x24, 0xFC, 0x24, 0xA0,
    0x25, 0x10, 0x00, 0x00, 0x3F, 0xF8, 0x24, 0x48, 0x24, 0x48, 0x24, 0x48, 0xFF, 0xFE, 0x00, 0x00, //蓝,0
    0x10, 0x20, 0x10, 0x20, 0x95, 0xFE, 0x54, 0x20, 0x58, 0xFC, 0x10, 0x20, 0xFD, 0xFE, 0x30, 0x00,
    0x38, 0xFC, 0x54, 0x84, 0x54, 0xFC, 0x90, 0x84, 0x10, 0xFC, 0x10, 0x84, 0x10, 0x94, 0x10, 0x88, //精,1
    0x00, 0x00, 0x3F, 0xF8, 0x00, 0x08, 0x00, 0x08, 0x1F, 0xF8, 0x00, 0x08, 0x00, 0x08, 0x3F, 0xF8,
    0x01, 0x00, 0x11, 0x10, 0x11, 0x10, 0x22, 0xA0, 0x04, 0x40, 0x08, 0x20, 0x30, 0x18, 0xC0, 0x06, //灵,2
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xFF, 0xFE, 0x01, 0x00, 0x01, 0x00,
    0x02, 0x80, 0x02, 0x80, 0x04, 0x40, 0x04, 0x40, 0x0A, 0x20, 0x11, 0x10, 0x21, 0x08, 0xC0, 0x06, //太,3
    0x10, 0x00, 0x13, 0xFC, 0x10, 0x84, 0x10, 0x88, 0xFC, 0x88, 0x10, 0x90, 0x30, 0x9C, 0x38, 0x84,
    0x55, 0x44, 0x55, 0x44, 0x91, 0x28, 0x11, 0x28, 0x12, 0x10, 0x12, 0x28, 0x14, 0x44, 0x11, 0x82, //极,4
    0x11, 0x00, 0x11, 0x00, 0x27, 0xDC, 0x41, 0x00, 0x81, 0x00, 0x17, 0xC0, 0x20, 0x3E, 0x61, 0x08,
    0xA1, 0x08, 0x27, 0xC8, 0x21, 0x08, 0x21, 0x08, 0x21, 0xC8, 0x2E, 0x08, 0x24, 0x28, 0x20, 0x10, //街,5
    0x10, 0x00, 0x3F, 0xFC, 0x4A, 0xA0, 0x0A, 0xA0, 0x7F, 0xFC, 0x0A, 0xA0, 0x0A, 0xA0, 0x7F, 0xFC,
    0x10, 0x10, 0x10, 0x10, 0x3E, 0xFC, 0x42, 0x10, 0x14, 0x90, 0x08, 0xFE, 0x30, 0x10, 0xC0, 0x10, //舞,6
    0x00, 0x00, 0x23, 0xF8, 0x12, 0x08, 0x12, 0x08, 0x83, 0xF8, 0x42, 0x08, 0x42, 0x08, 0x13, 0xF8,
    0x10, 0x00, 0x27, 0xFC, 0xE4, 0xA4, 0x24, 0xA4, 0x24, 0xA4, 0x24, 0xA4, 0x2F, 0xFE, 0x00, 0x00, //温,0
    0x01, 0x00, 0x00, 0x80, 0x3F, 0xFE, 0x22, 0x20, 0x22, 0x20, 0x3F, 0xFC, 0x22, 0x20, 0x22, 0x20,
    0x23, 0xE0, 0x20, 0x00, 0x2F, 0xF0, 0x24, 0x10, 0x42, 0x20, 0x41, 0xC0, 0x86, 0x30, 0x38, 0x0E, //度,1
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // [空格] ,
};

/*!
  * @brief    液晶字符输出(6*8字体)
  *
  * @param    x: 0 - 20	(行)
  * @param    y: 0 - 19	(列)
  * @param    word_color: 字体颜色
  * @param    back_color: 背景颜色
  *
  * @return   无
  *
  * @note     内部调用
  *
  * @see
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_P6X8(uint8_t x, uint8_t y, uint8_t c_dat, uint16_t word_color, uint16_t back_color)
{
  uint8_t i, j;

  TFTSPI_Set_Pos(x * 6, y * 8, (x + 1) * 6 - 1, (y + 1) * 8 - 1); //定位字符显示区域

  for (j = 0; j < 8; j++)
  {
    for (i = 0; i < 6; i++)
    {
      if ((Font_code8[c_dat - 32][i]) & (0x01 << j))
        TFTSPI_Write_Word(word_color);
      else
        TFTSPI_Write_Word(back_color);
    }
  }
}

/*!
  * @brief    液晶字符输出(8*8字体)
  *
  * @param    x:0 - 15	(行)
  * @param    y:0 - 19	(列)
  * @param    word_color: 字体颜色
  * @param    back_color: 背景颜色
  *
  * @return   无
  *
  * @note     内部调用
  *
  * @see      TFTSPI_P8X8(1, 1, "123456", u16YELLOW, u16RED);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_P8X8(uint8_t x, uint8_t y, uint8_t c_dat, uint16_t word_color, uint16_t back_color)
{
  uint8_t i, j;

  TFTSPI_Set_Pos(x * 8, y * 8, (x + 1) * 8 - 1, (y + 1) * 8 - 1); //定位字符显示区域

  for (j = 0; j < 8; j++)
  {
    TFTSPI_Write_Word(back_color);
    for (i = 0; i < 6; i++)
    {
      if ((Font_code8[c_dat - 32][i]) & (0x01 << j))
        TFTSPI_Write_Word(word_color);
      else
        TFTSPI_Write_Word(back_color);
    }
    TFTSPI_Write_Word(back_color);
  }
}

/*!
  * @brief    液晶字符输出(8*16字体)
  *
  * @param    x: 0 -15   (行)
  * @param    y: 0 -9  	 (列)
  * @param    word_color: 字体颜色
  * @param    back_color: 背景颜色
  *
  * @return   无
  *
  * @note     内部调用
  *
  * @see
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_P8X16(uint8_t x, uint8_t y, uint8_t c_dat, uint16_t word_color, uint16_t back_color)
{
  uint8_t i, j;

  TFTSPI_Set_Pos(x * 8, y * 16, (x + 1) * 8 - 1, (y + 1) * 16 - 1); //定位字符显示区域

  for (j = 0; j < 16; j++)
  {
    for (i = 0; i < 8; i++)
    {
      if ((Font_code16[c_dat - 32][j]) & (0x01 << i))
        TFTSPI_Write_Word(word_color);
      else
        TFTSPI_Write_Word(back_color);
    }
  }
}

/*!
  * @brief    液晶字符串输出(6*8字体)
  *
  * @param    x: 0 - 20 (行)
  * @param    y: 0 - 19 (列)
  * @param    word_color: 字体颜色
  * @param    back_color: 背景颜色
  *
  * @return   无
  *
  * @note     无
  *
  * @see      TFTSPI_P6X8Str(1, 1, "123456", u16YELLOW, u16RED);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_P6X8Str(uint8_t x, uint8_t y, char *s_dat, uint16_t word_color, uint16_t back_color)
{
  while (*s_dat)
    TFTSPI_P6X8(x++, y, *s_dat++, word_color, back_color);
}

/*!
  * @brief    液晶字符串输出(8*8字体)
  *
  * @param    x:0 - 15 (行)
  * @param    y:0 - 19 (列)
  * @param    word_color: 字体颜色
  * @param    back_color: 背景颜色
  *
  * @return   无
  *
  * @note     无
  *
  * @see      TFTSPI_P8X8Str(1, 1, "123456", u16YELLOW, u16RED);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_P8X8Str(uint8_t x, uint8_t y, char *s_dat, uint16_t word_color, uint16_t back_color)
{
  while (*s_dat)
    TFTSPI_P8X8(x++, y, *s_dat++, word_color, back_color);
}

/*!
  * @brief    液晶字符串输出(8*16字体)
  *
  * @param    x: x: 0 -15   (行)
  * @param    y: y: 0 -9  	 (列)
  * @param    word_color: 字体颜色
  * @param    back_color: 背景颜色
  *
  * @return   无
  *
  * @note     无
  *
  * @see      TFTSPI_P8X16Str(1, 1, "123456", u16YELLOW, u16RED);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_P8X16Str(uint8_t x, uint8_t y, char *s_dat, uint16_t word_color, uint16_t back_color)
{
  while (*s_dat)
    TFTSPI_P8X16(x++, y, *s_dat++, word_color, back_color);
}

/*!
  * @brief    液晶汉字字符串输出(12*16字体)
  *
  * @param    x: 0 - 7	(行)
  * @param    y: 0 -12	(列)
  * @param    word_color: 字体颜色
  * @param    back_color: 背景颜色
  *
  * @return   无
  *
  * @note     汉字只能是字库里的 字库没有的需要自行添加
  *
  * @see      TFTSPI_P16x12Str(1, 1, "123456", u16YELLOW, u16RED);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_P16x12Str(uint8_t x, uint8_t y, char *s_dat, uint16_t word_color, uint16_t back_color)
{
  unsigned char wm = 0, ii = 0, i, j;
  unsigned int adder = 1;

  while (s_dat[ii] != '\0')
  {
    wm = 0;
    adder = 1;
    while (hanzi_Idx[wm] > 127)
    {
      if (hanzi_Idx[wm] == (uint8_t)s_dat[ii])
      {
        if (hanzi_Idx[wm + 1] == s_dat[ii + 1])
        {
          adder = wm * 12;
          break;
        }
      }
      wm += 2;
    }

    if (adder != 1) // 显示汉字
    {
      TFTSPI_Set_Pos(x * 16, y * 12, (x + 1) * 16 - 1, (y + 1) * 12 - 1); //定位字符显示区域
      for (j = 0; j < 24; j++)
      {
        for (i = 0; i < 8; i++)
        {
          if ((hanzi[adder]) & (0x80 >> i))
            TFTSPI_Write_Word(word_color);
          else
            TFTSPI_Write_Word(back_color);
        }
        adder += 1;
      }
    }
    else //显示空白字符
    {
    }
    //y+=1;//左右方向
    x += 1; //上下方向
    ii += 2;
  }
}

/*!
  * @brief    液晶汉字字符串输出(16*16字体)
  *
  * @param    x: 0 - 7	(行)
  * @param    y: 0 - 9	(列)
  * @param    word_color: 字体颜色
  * @param    back_color: 背景颜色
  *
  * @return   无
  *
  * @note     汉字只能是字库里的 字库没有的需要自行添加
  *
  * @see      TFTSPI_P16x16Str(1, 1, "123456", u16YELLOW, u16RED);
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_P16x16Str(uint8_t x, uint8_t y, char *s_dat, uint16_t word_color, uint16_t back_color)
{
  unsigned char wm = 0, ii = 0, i, j;
  int adder = 1;

  while (s_dat[ii] != '\0')
  {
    wm = 0;
    adder = 1;
    while (hanzi_Idx[wm] > 127)
    {
      if (hanzi_Idx[wm] == (uint8_t)s_dat[ii])
      {
        if (hanzi_Idx[wm + 1] == s_dat[ii + 1])
        {
          adder = wm * 16;
          break;
        }
      }
      wm += 2;
    }

    if (adder != 1) // 显示汉字
    {
      TFTSPI_Set_Pos(x * 16, y * 16, (x + 1) * 16 - 1, (y + 1) * 16 - 1); //定位字符显示区域
      for (j = 0; j < 32; j++)
      {
        for (i = 0; i < 8; i++)
        {
          if ((hanzi16x16[adder]) & (0x80 >> i))
            TFTSPI_Write_Word(word_color);
          else
            TFTSPI_Write_Word(back_color);
        }
        adder += 1;
      }
    }
    else //显示空白字符
    {
    }
    //y+=1;//左右方向
    x += 1; //上下方向
    ii += 2;
  }
}

/*!
  * @brief    显示图片
  *
  * @param    xs ：起始x
  * @param    ys ：起始y
  * @param    xe ：结束x
  * @param    ys ：结束y
  * @param    ppic ：图片数据
  *
  * @return   无
  *
  * @note     起始、终止横坐标(0-127)，纵坐标(0-159),显示颜色uint16
  *
  * @see
  *
  * @date     2019/6/13 星期四
  */
void TFTSPI_Show_Pic2(uint8_t xs, uint8_t ys, uint8_t w, uint8_t h, const char *ppic)
{
  unsigned int i;
  TFTSPI_Set_Pos(xs, ys, xs + w - 1, ys + h);
  for (i = 0; i < w * h; i++)
  {
    TFTSPI_Write_Word((ppic[2 * i] << 8) + (ppic[2 * i + 1])); //高位在前，且两个数据组合成一个16位数据表示像素值
  }
}

/*!
  * @brief    显示电池图标
  *
  * @param    无
  *
  * @return   无
  *
  * @note     无
  *
  * @see      TFTSPI_Show_Battery_Icon();
  *
  * @date     2019/6/13 星期四
  */
// void TFTSPI_Show_Battery_Icon(void)
// {
//     TFTSPI_Show_Pic2(138,2,20,10,gImage_Battery_S); //显示电池图标20*10像素
// }

/*!
  * @brief    显示标签
  *
  * @param    无
  *
  * @return   无
  *
  * @note     无
  *
  * @see      TFTSPI_Show_Title();
  *
  * @date     2019/6/13 星期四
  */
// void TFTSPI_Show_Title(void)
// {
//     TFTSPI_Show_Pic2(0,0,92,28,gImage_title2);
//     TFTSPI_Draw_Line(0,24,160,24,u16BLACK);   //补齐分割线
// }

/*!
  * @brief    显示龙邱LOG
  *
  * @param    无
  *
  * @return   无
  *
  * @note     无
  *
  * @see      TFTSPI_Show_Logo();
  *
  * @date     2019/6/13 星期四
  */
// void TFTSPI_Show_Logo(uint8_t xs,uint8_t ys)
// {
//     TFTSPI_Show_Pic2(xs,ys,160,54,gImage_lo);       //80,gImage_ftflogo);     //
// }

/*!
  * @brief    TFT18屏 unsigned char 灰度数据显示
  *
  * @param    high_start ： 显示图像开始位置
  * @param    wide_start ： 显示图像开始位置
  * @param    high ： 显示图像高度
  * @param    wide ： 显示图像宽度
  * @param    Pixle： 显示图像数据地址
  *
  * @return   无
  *
  * @note     注意 屏幕左上为 （0，0）
  *
  * @see
  *
  * @date     2019/12/3 星期二
  */
void TFTSPI_Road(unsigned char high_start, unsigned char wide_start, unsigned char high, unsigned char wide, unsigned char *Pixle)
{
  unsigned long i;
  /* 设置显示范围 */
  TFTSPI_Set_Pos(wide_start, high_start, wide_start - 1 + wide, high_start - 1 + high);
  unsigned short color;
  unsigned long temp = high * wide;
  /* 显示图像 */
  for (i = 0; i < temp; i++)
  {

    /* 将灰度转化为 RGB565 */
    color = (Pixle[i] >> 3) << 11;
    color |= (Pixle[i] >> 2) << 5;
    color |= Pixle[i] >> 3;
    /* 显示 */
    TFTSPI_Write_Word(color);
  }
}

/*!
  * @brief    TFT18屏 unsigned char 二值化数据显示
  *
  * @param    high_start ： 显示图像开始位置
  * @param    wide_start ： 显示图像开始位置
  * @param    high ： 显示图像高度
  * @param    wide ： 显示图像宽度
  * @param    Pixle： 显示图像数据地址
  *
  * @return   无
  *
  * @note     注意 屏幕左上为 （0，0）
  *
  * @see
  *
  * @date     2019/12/3 星期二
  */
void TFTSPI_BinRoad(unsigned char high_start, unsigned char wide_start, unsigned char high, unsigned char wide, unsigned char *Pixle)
{
  unsigned long i;
  /* 设置显示范围 */
  TFTSPI_Set_Pos(wide_start, high_start, wide_start - 1 + wide, high_start - 1 + high);

  unsigned long temp = high * wide;
  /* 显示图像 */
  for (i = 0; i < temp; i++)
  {
    if (Pixle[i])
    {
      /* 显示 */
      TFTSPI_Write_Word(0xffff);
    }
    else
    {
      /* 显示 */
      TFTSPI_Write_Word(0);
    }
  }
}

/////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////以下部分为功能测试/////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

// void Test_TFT18(void)
// {

//   TFTSPI_Init(0);        //LCD初始化  0:横屏  1：竖屏
//   TFTSPI_CLS(u16BLUE);   //蓝色屏幕
//   TFTSPI_Show_Logo(0,37);//显示龙邱LOGO
//   TFTSPI_P16x16Str(0,0,"北京龙邱智能科技",u16RED,u16BLUE);		//字符串显示
//   TFTSPI_P8X16Str(0,1,"Long Qiu i.s.t.",u16WHITE,u16BLACK);		//字符串显示
//   delayms(1000);         //延时等待
//   char txt[32];
//   unsigned short count = 1;
//   while(1)
//   {
//       sprintf(txt, "variate:%05d", count);                    //将变量填充到字符串的对应位置，并将字符串存放到txt[]中
//       TFTSPI_P8X16Str(0, 6, txt, u16RED, u16BLUE);              //将txt中 内容显示出来
//   	  LED_Ctrl(LED0,RVS);        //电平翻转,LED闪烁
// 	  delayms(500);              //延时等待
//       count++;
//    }
// }//TEST()
